//本体のスクリプト書き換えを可能な限り少なくするため、eventは別ファイルに書いてevent関数で呼び出しています
//本体の書換えの増加>modスクリプトの肥大化　という方針なので多少の無駄があるのはご容赦ください
event filtermod_trigger
{
	//内政トリガー
	set(sortOutPurpose, 0)
	if (ptest(politics1, droplevel1)){set(sortOutPurpose, 1001)}
	else if (ptest(politics1, droplevel2)){set(sortOutPurpose, 1011)}
	else if (ptest(politics1, droplevel3)){set(sortOutPurpose, 1021)}
	else if (ptest(politics1, droplevel4)){set(sortOutPurpose, 1031)}
	else if (ptest(politics1, dropreset)){set(sortOutPurpose, -1)}
	else if (ptest(politics1,dropskill1)){
		set(sortOutPurpose, 1101)
		set(filtermod_filtered_skill2,0)
		set(filtermod_filtered_skill3,filtermod_filtered_skill)
	}
	else if (ptest(politics1,dropskill2)){
		set(sortOutPurpose, 1100)
		set(filtermod_filtered_skill2,0)
		set(filtermod_filtered_skill3,filtermod_filtered_skill)
	}
	if (sortOutPurpose!=0) {event(sortOutAction)}
}

event filtermod_unitchange_main
{
	//内政領地の空白用ユニットを消して代わりにこのmodのユニットを入れる処理
	eraseunit(004drop99empty1) eraseunit(004drop99empty2) eraseunit(004drop99empty3)
	addunit(003wwwdroplevel,politics1) addunit(003wwwdropEcard,politics1) addunit(003wwwdropreset,politics1)
}

event sortOutAction_kaihen
{
	//展開コマンドのイベント
	routine(filtermod_main)
	spotmark()
	while (count(@allPowerTalent) >= 1 && count(@politicsUnitCount) < 127) {
		index(@allPowerTalent, 0, @unit)
		subv(@allPowerTalent, @unit)

		storespotofunit(@unit,@filtermod)
		spotmark(@filtermod,2)
		set(filtermod_spotmark,1)

		set(purpose, 6)
		routine(privateData)
		addUnit(@politicsUnit, politics1)
		storeUnitOfSpot(politics1, @politicsUnitCount)
	}
	
	if (count(@politicsUnitCount) == 127) {
		msg(※人材が多すぎるため、すべてを展開出来ませんでした。$より条件の狭い展開方法を選択してください。)
		erase()
	}
	clear(@filtermod)
}

event filtermod_main_nochange
{
	//前回のフィルター設定から変更を加えずにフィルターする処理
	set(sortOutPurpose,99999999)
	routine(filtermod_main)
}

event filtermod_main
{
	//フィルター処理
	//今まで共通でsortOutPurpose変数を起動フラグにしていたのを
	//フィルター毎に変数に分けて格納することで上書き可能になった

	set(filtermodnum,0) set(filtermodnum2,0) set(filtermodnum3,0) set(filtermodnum4,0)
	clear(@allSortOutClass) clear(@allAutoClassChangeUnit)

	//フラグ書き換え処理
	//コマンドごとの指定系統のフラグを上書きする
	if (sortOutPurpose <= 0) {
		routine(filtermod_reset)
		if (sortOutPurpose == -1) {clear(@allPowerTalent)}
		return()
	}
	else if (1<=sortOutPurpose && sortOutPurpose<=99) {set(filtermod_filtered_class,sortOutPurpose)}
	else if (sortOutPurpose == 99999999) {}
	else if (sortOutPurpose >= 1100) {set(filtermod_filtered_skill,sortOutPurpose)}
	else if (sortOutPurpose >= 1000){
		set(filtermod_filtered_level,sortOutPurpose)
		sub(filtermod_filtered_level,1000)
	}
	else if (sortOutPurpose >= 100) {set(filtermod_filtered_autoCC,sortOutPurpose)}

	//フィルター条件設定処理
	//フラグに応じてフィルター設定
	if (filtermod_filtered_class!=0) {
		if (filtermod_filtered_class == 1) {storeud(SAVEguideLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 2){storeud(SAVEarmyLineage, @allSortOutClass)}
		else  if (filtermod_filtered_class == 3){storeud(SAVEmachineLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 4){storeud(SAVEstudentLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 5){storeud(SAVEspiritLineage, @allSortOutClass)}
		else  if (filtermod_filtered_class == 6){storeud(SAVEgokudouLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 7){storeud(SAVEpublicservantLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 8){storeud(SAVEgroupLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 9){storeud(SAVEworkerLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 10){storeud(SAVEpriestLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 11){storeud(SAVEoutlawLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 21){storeud(SAVEtempworkerLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 22){storeud(SAVEassassinLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 23){storeud(SAVEvipLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 24){storeud(SAVErevolutionaryLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 25){storeud(SAVEzombieLineage,@allSortOutClass)}
		else  if (filtermod_filtered_class == 99){storeud(SAVEfelLineage,@allSortOutClass)}
	}
	if (filtermod_filtered_skill!=0) {
		set(filtermodnum,filtermod_filtered_skill)
		if (filtermod_filtered_skill2==0) {
			while (1==1) {
				clear(@nekomember)
				choice(filtermodnum2,やめる,エネルギーカード,特殊クラスチェンジパス,一時能力,固有能力（システム系）,固有能力（その他）)
				if (filtermodnum2==0) {
					set(filtermod_filtered_skill,filtermod_filtered_skill3)
					set(filtermod_filtered_skill2,1)
					set(filtermodnum,filtermod_filtered_skill3)
					break()
				}
				else if (filtermodnum2==1) {
					setv(@nekotemp,energycard)
				}
				else if (filtermodnum2==2) {
					setv(@nekotemp,ccpass)
				}
				else if (filtermodnum2==3) {
					choice(filtermodnum2,やめる,スキル指定,系統指定)
					if (filtermodnum2==0) {
						continue()
					}
					else if (filtermodnum2==1) {
						routine(filtermod_listskill_loyaltyprotect)
						routine(filtermod_listskill_upstatus)
						routine(filtermod_listskill_downstatus)
						routine(filtermod_listskill_temporary)
					}
					else if (filtermodnum2==2) {
						choice(filtermodnum2,やめる,能力上昇,能力低下・制限,忠誠低下耐性,一時武装)
						if (filtermodnum2==0) {
							continue()
						}
						else if (filtermodnum2==1) {
							setv(@nekotemp,filtermod_listskill_upstatus)
						}
						else if (filtermodnum2==2) {
							setv(@nekotemp,filtermod_listskill_downstatus)
						}
						else if (filtermodnum2==3) {
							setv(@nekotemp,filtermod_listskill_loyaltyprotect)
						}
						else if (filtermodnum2==4) {
							setv(@nekotemp,filtermod_listskill_temporary)
						}
					}
				}
				else if (filtermodnum2==4) {
					choice(filtermodnum2,やめる,忠臣,希望職,リクルーター,固有能力（武装共有）)
					if (filtermodnum2==0) {
						continue()
					}
					else if (filtermodnum2==1) {
						setv(@nekomember,loyalsubject_nini)
						addv(@nekomember,loyalsubject_honoka) addv(@nekomember,loyalsubject_ouen)
						addv(@nekomember,loyalsubject_kamiya) addv(@nekomember,loyalsubject_daiya) 
						addv(@nekomember,loyalsubject_himesiro) addv(@nekomember,loyalsubject_riferi)
						addv(@nekomember,loyalsubject_rifon) addv(@nekomember,loyalsubject_gaagoriusu)
						addv(@nekomember,loyalsubject_suiren) addv(@nekomember,loyalsubject_kizaki)
						addv(@nekomember,loyalsubject_veiraru) addv(@nekomember,loyalsubject_isikawa)
						addv(@nekomember,loyalsubject_ryudou) addv(@nekomember,loyalsubject_fel)
					}
					else if (filtermodnum2==2) {
						setv(@nekomember,wishclass_artist) addv(@nekomember,wishclass_shotputter)
						addv(@nekomember,wishclass_ninga) addv(@nekomember,wishclass_bakuto)
						addv(@nekomember,wishclass_mizusyoubai) addv(@nekomember,wishclass_bike)
						addv(@nekomember,wishclass_thief) addv(@nekomember,wishclass_dealer)
					}
					else if (filtermodnum2==3) {
						setv(@nekomember,recruiter_machine) addv(@nekomember,recruiter_worker)
						addv(@nekomember,recruiter_assassin)
					}
					else if (filtermodnum2==4) {
						setv(@nekomember,skillshare_assaultrifle)
						addv(@nekomember,skillshare_grenadegun) addv(@nekomember,skillshare_torpedo)
						addv(@nekomember,skillshare_sniperrifle) addv(@nekomember,skillshare_poisonousdrug)
						addv(@nekomember,skillshare_sparkcutter) addv(@nekomember,skillshare_temptationconf)
					}
				}
				else if (filtermodnum2==5) {
					setv(@nekomember,educate) addv(@nekomember,innovation) addv(@nekomember,assistant)
					addv(@nekomember,condemn) addv(@nekomember,alienate) addv(@nekomember,treatment)
					addv(@nekomember,glibtalker) addv(@nekomember,invent) addv(@nekomember,rich)
					addv(@nekomember,desiretoprotect) addv(@nekomember,sociable)
					addv(@nekomember,shyness) addv(@nekomember,kingvessel) addv(@nekomember,absolute)
					addv(@nekomember,charismatic) 
					addv(@nekomember,rational) addv(@nekomember,materialguard) addv(@nekomember,magicguard)
					addv(@nekomember,bravery) addv(@nekomember,calm) addv(@nekomember,nuisance)
					addv(@nekomember,affectionate) addv(@nekomember,coldblood) addv(@nekomember,moodyperson)
					addv(@nekomember,eccentric) addv(@nekomember,madness) addv(@nekomember,serious)
					addv(@nekomember,twosides) addv(@nekomember,warlike) addv(@nekomember,hardworker)
					addv(@nekomember,moodmaker) addv(@nekomember,sensualist_male)
					addv(@nekomember,sensualist_female)
					addv(@nekomember,picky) addv(@nekomember,sadist) addv(@nekomember,masochist)
					addv(@nekomember,slowstarter) addv(@nekomember,weakling) addv(@nekomember,metamorphosis)
				}
				if (@nekomember!=0) {
					routine(nekochoice)
					if (@nekotemp==0) {continue()}
				}
				clear(@nekomember)
				setud(filtermod_filtered_selectedskill,@nekotemp)
				set(filtermod_filtered_skill2,1)
				break()
			}
		}

		storeud(filtermod_filtered_selectedskill,@filtermodTargetskill)
		if (has(@filtermodTargetskill,filtermod_seal)>0) {
			addv(@filtermodTargetskill,seal5) addv(@filtermodTargetskill,seal4)
			addv(@filtermodTargetskill,seal3) addv(@filtermodTargetskill,seal2)
			addv(@filtermodTargetskill,seal1) addv(@filtermodTargetskill,seal10)
			addv(@filtermodTargetskill,seal9) addv(@filtermodTargetskill,seal8)
			addv(@filtermodTargetskill,seal7) addv(@filtermodTargetskill,seal6)
			subv(@filtermodTargetskill,filtermod_seal)
		}
		if (has(@filtermodTargetskill,filtermod_elation)>0) {
			addv(@filtermodTargetskill,elation1) addv(@filtermodTargetskill,elation2)
			addv(@filtermodTargetskill,elation3) addv(@filtermodTargetskill,elation4)
			addv(@filtermodTargetskill,elation5) addv(@filtermodTargetskill,elation6)
			addv(@filtermodTargetskill,elation7) addv(@filtermodTargetskill,elation8)
			addv(@filtermodTargetskill,elation9) addv(@filtermodTargetskill,elation10)
			subv(@filtermodTargetskill,filtermod_elation)
		}
		if (has(@filtermodTargetskill,filtermod_elation_kaihen)>0) {
			routine(loyaltyOFFskillchange_setelaiton)
			addv(@filtermodTargetskill,@loyaltyOFFskillchange_elation)
			clear(@loyaltyOFFskillchange_elation)
			subv(@filtermodTargetskill,filtermod_elation_kaihen)
		}
		if (has(@filtermodTargetskill,filtermod_metamorphosistime)>0) {
			addv(@filtermodTargetskill,metamorphosistime5)
			addv(@filtermodTargetskill,metamorphosistime4) addv(@filtermodTargetskill,metamorphosistime3)
			addv(@filtermodTargetskill,metamorphosistime2) addv(@filtermodTargetskill,metamorphosistime1)
			addv(@filtermodTargetskill,metamorphosistime10) addv(@filtermodTargetskill,metamorphosistime9)
			addv(@filtermodTargetskill,metamorphosistime8) addv(@filtermodTargetskill,metamorphosistime7)
			addv(@filtermodTargetskill,metamorphosistime6)
			subv(@filtermodTargetskill,filtermod_metamorphosistime)
		}
		if (has(@filtermodTargetskill,filtermod_listskill_loyaltyprotect)>0) {
			routine(filtermod_listskill_loyaltyprotect)
			addv(@filtermodTargetskill,@nekomember)
			clear(@nekomember)
		}
		if (has(@filtermodTargetskill,filtermod_listskill_upstatus)>0) {
			routine(filtermod_listskill_upstatus)
			addv(@filtermodTargetskill,@nekomember)
			clear(@nekomember)
		}
		if (has(@filtermodTargetskill,filtermod_listskill_downstatus)>0) {
			routine(filtermod_listskill_downstatus)
			addv(@filtermodTargetskill,@nekomember)
			clear(@nekomember)
		}
		if (has(@filtermodTargetskill,filtermod_listskill_temporary)>0) {
			routine(filtermod_listskill_temporary)
			addv(@filtermodTargetskill,@nekomember)
			clear(@nekomember)
		}
		sub(filtermodnum,1100)
	}
	if (filtermod_filtered_level!=0){
		set(filtermodnum2,filtermod_filtered_level)
		add(filtermodnum2,9)
		if (filtermodnum2==40) {set(filtermodnum2,100)}
	}
	if (filtermod_filtered_autoCC!=0) {
		storeud(SAVEallAutoClassChangeUnit, @allAutoClassChangeUnit)
		set(filtermodnum3,filtermod_filtered_autoCC) sub(filtermodnum3,101)
	}

	//実際のフィルター処理
	//起動しているフィルターを通して全てパスしたものだけ残す
	clear(@filtermod)
	while (count(@allPowerTalent) >= 1) {
		index(@allPowerTalent, 0, @unit)
		subv(@allPowerTalent, @unit)

		if (filtermod_filtered_class!=0) {
			storeBaseClassOfUnit(@unit,@filtermod2)
			if (has(@allSortOutClass,@filtermod2) == 0) {continue()}
		}
		
		if (filtermod_filtered_skill!=0) {
			//仕様変更の度にわけわからなくなるのでメモ
			//所持選択時はフラグ1、非所持選択時はフラグ0
			//条件に合うものを通さなければいけないので、ifには所持時に0、非所持時に1を返す条件を書く
			storeskillofunit(@unit,@filtermod2)
			setv(@filtermod3,@filtermod2)
			subv(@filtermod2,@filtermodTargetskill)
			if (has(@filtermod2,@filtermod3)==filtermodnum) {continue()}
		}
		
		if (filtermod_filtered_level!=0){
			pushlevel(@unit,filtermodnum4)
			if (filtermodnum4<filtermod_filtered_level || filtermodnum2<filtermodnum4) {continue()}
		}
		
		if (filtermod_filtered_autoCC!=0) {
			if (has(@allAutoClassChangeUnit, @unit) != filtermodnum3) {continue()}
		}
		addv(@filtermod,@unit)
	}
	setv(@allPowerTalent,@filtermod)
	clear(@filtermod) clear(@filtermod2) clear(@filtermod3) clear(@filtermodTargetskill) set(sortOutPurpose,0)
	routine(filtermod_count)
}

event filtermod_listskill_loyaltyprotect
{
	addv(@nekomember,loyaltybuffer) addv(@nekomember,loyaltykeep)
}

event filtermod_listskill_upstatus
{
	addv(@nekomember,double)
	addv(@nekomember,filtermod_elation)
	addv(@nekomember,filtermod_elation_kaihen)
	addv(@nekomember,allaid) addv(@nekomember,highallaid) 
	addv(@nekomember,mpatkmagaid)
	addv(@nekomember,highmpatkmagaid) addv(@nekomember,hpdefmdfaid) addv(@nekomember,highhpdefmdfaid)
	addv(@nekomember,hpmpaid) addv(@nekomember,highhpmpaid) addv(@nekomember,attackaid)
	addv(@nekomember,highattackaid) addv(@nekomember,ultraattackaid) addv(@nekomember,defenseaid)
	addv(@nekomember,highdefenseaid) addv(@nekomember,magdefaid) addv(@nekomember,highmagdefaid)
	addv(@nekomember,moveaid) addv(@nekomember,highmoveaid) addv(@nekomember,medicine)
	addv(@nekomember,highmedicine) 
	addv(@nekomember,artup) addv(@nekomember,highartup)
	addv(@nekomember,filtermod_metamorphosistime)
}

event filtermod_listskill_downstatus
{
	addv(@nekomember,filtermod_seal) addv(@nekomember,allweaken) addv(@nekomember,highallweaken)
}

event filtermod_listskill_temporary
{
	addv(@nekomember,assaultrifle_temporary)
	addv(@nekomember,grenadegun_temporary) addv(@nekomember,torpedo_temporary)
	addv(@nekomember,sniperrifle_temporary) addv(@nekomember,poisonousdrug_temporary)
	addv(@nekomember,sparkcutter_temporary) addv(@nekomember,temptationconf_temporary)
	addv(@nekomember,electricritual_temporary)
}

event filtermod_count
{
	//掛かっているフィルターの種類数をカウントし、変数に格納する処理
	//現在は掛かっているかいないかの判断にしか使っていないので種類数は意味がない
	set(filtermod_filteredcount,0)
	if (filtermod_filtered_class!=0) {add(filtermod_filteredcount,1)}
	if (filtermod_filtered_skill!=0) {add(filtermod_filteredcount,1)}
	if (filtermod_filtered_autoCC!=0) {add(filtermod_filteredcount,1)}
	if (filtermod_filtered_level!=0) {add(filtermod_filteredcount,1)}
}

event filtermod_reset
{
	//フィルターを全てOFFにするルーティン
	set(filtermod_filtered_class,0)
	set(filtermod_filtered_skill,0)
	set(filtermod_filtered_skill2,0)
	set(filtermod_filtered_skill3,0)
	set(filtermod_filtered_level,0)
	set(filtermod_filtered_autoCC,0)
}

event allAutoChangeGimmickAction_filtered
{
	//フィルターが適用されている場合の処理
	//フェルの喋る内容変えるだけだから本体にif式で書き込めば2行で済むんですが
	while (1==1) {
		if (allAutoChangePurpose == 1) {
			talk(felclone, fel_tu.png, フィルターされている人材をオートクラスチェンジ実行状態に出来るよ！$実行する？)
			choice(choiceNumber, やめる, 【実行する】, オートクラスチェンジを実行すると？)
			if (choiceNumber == 0) {
				break()
			}else if (choiceNumber == 1) {
				storeud(SAVEallAutoClassChangeUnit, @allAutoClassChangeUnit)
				subv(@allAutoClassChangeUnit, @allPowerTalent)
				addv(@allAutoClassChangeUnit, @allPowerTalent)
				setud(SAVEallAutoClassChangeUnit, @allAutoClassChangeUnit)
				talk(felclone, fel_emi.png, 実行したよ〜！)
				if (autoClassChangeSortONOFF == 1) {
					msg(※…メニュー欄は更新されないため、設定前の人材メニューは引き続き表示されます。$最新情報に更新する場合はもう一度ソート機能を実行して下さい。)
				}
				break()
			}else if (choiceNumber == 2) {
				talk(felclone, fel_tu.png, オートクラスチェンジを実行させた場合、人材は独自の判断で勝手にクラスチェンジするようになるんだよ。)
				talk(felclone, fel_emi.png, 管理が手間な時は試してみてね。)
				erase()
			}
		}else  if (allAutoChangePurpose == 2) {
			talk(felclone, fel_tu.png, フィルターされている人材をオートクラスチェンジ実行状態から解除するよ。$実行する？)
			choice(choiceNumber, やめる, 【実行する】, オートクラスチェンジを解除すると？)
			if (choiceNumber == 0) {
				break()
			}else if (choiceNumber == 1) {
				storeud(SAVEallAutoClassChangeUnit, @allAutoClassChangeUnit)
				subv(@allAutoClassChangeUnit, @allPowerTalent)
				setud(SAVEallAutoClassChangeUnit, @allAutoClassChangeUnit)
				talk(felclone, fel_emi.png, 解除したよ〜！)
				if (autoClassChangeSortONOFF == 2) {
					msg(※…メニュー欄は更新されないため、設定前の人材メニューは引き続き表示されます。$最新情報に更新する場合はもう一度ソート機能を実行して下さい。)
				}
				break()
			}else if (choiceNumber == 2) {
				talk(felclone, fel_tu.png, メニューから直接クラスチェンジ操作を行わない限りクラスチェンジはしなくなるよ（※ＣＰＵ所属時を除く）)
				talk(felclone, fel_emi.png, 全体を細かく管理したくなった時はここで解除してね。)
				erase()
			}
		}
	}
	routine(autoCC_save)
}